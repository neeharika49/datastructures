Given two numbers represented by two linked lists of size N and M. The task is to return a sum list.

The sum list is a linked list representation of the addition of two input numbers from the last.

Example 1:

Input:
N = 2
valueN[] = {4,5}
M = 3
valueM[] = {3,4,5}
Output: 3 9 0  
Explanation: For the given two linked
list (4 5) and (3 4 5), after adding
the two linked list resultant linked
list will be (3 9 0).
Example 2:

Input:
N = 2
valueN[] = {6,3}
M = 1
valueM[] = {7}
Output: 7 0
Explanation: For the given two linked
list (6 3) and (7), after adding the
two linked list resultant linked list
will be (7 0).
Your Task:
The task is to complete the function addTwoLists() which has node reference of both the linked lists and returns the head of the sum list.   

Expected Time Complexity: O(N+M)
Expected Auxiliary Space: O(Max(N,M)) for the resultant list.

Constraints:
1 <= N, M <= 5000




class Solution
{
    public:
    //Function to add two numbers represented by linked list.
    struct Node* addTwoLists(struct Node* first, struct Node* second)
    {
        // code here
    stack<int>s1,s2;
    Node*p=first;Node*q=second;
    while(p!=NULL)
    {
        s1.push(p->data);
        p=p->next;
    }
    while(q!=NULL)
    {
        s2.push(q->data);
        q=q->next;
    }
    int carry=0,sum=0;
    struct Node* head=NULL;
    while(s1.size()|| s2.size() || carry)
    {   sum=0;
        if(s1.size()!=0)
        {
            sum+=s1.top();
            s1.pop();
        }
        if(s2.size()!=0)
        {
            sum+=s2.top();
            s2.pop();
        }
         sum+=carry;
         carry=sum/10;
         struct Node*new1=new Node(sum%10);
         new1->next=head;
         head=new1;
    }
        return head;
    }
};
